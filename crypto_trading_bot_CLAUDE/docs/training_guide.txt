ğŸ“Š Guide pas Ã  pas: De l'entraÃ®nement au backtesting avec votre bot de trading crypto

==============================================
GUIDE ADAPTÃ‰ AU BOT DE TRADING CRYPTO
==============================================

Ce guide dÃ©taille les Ã©tapes spÃ©cifiques pour utiliser les fonctionnalitÃ©s de votre bot, de l'entraÃ®nement au backtesting.

--------------------------------------------------
1. TÃ‰LÃ‰CHARGEMENT DES DONNÃ‰ES HISTORIQUES
--------------------------------------------------
Utilisez le script data_loader.py pour tÃ©lÃ©charger les donnÃ©es depuis Binance:

Exemple concret:
  python download_data.py --symbol BTCUSDT --interval 15m --start 2023-01-01 --end 2023-12-31 --output data/market_data/BTCUSDT_15m.csv

Options disponibles:
  --symbol       : Symbole de la paire (ex: BTCUSDT)
  --interval     : Intervalle de temps (1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, etc.)
  --start        : Date de dÃ©but au format YYYY-MM-DD
  --end          : Date de fin au format YYYY-MM-DD
  --output       : Chemin de sortie des donnÃ©es (optionnel)
  --use_testnet  : Utiliser l'API testnet (True/False)


--------------------------------------------------
3. ENTRAÃ�NEMENT DU MODÃˆLE LSTM
--------------------------------------------------
Utilisez le script train_model.py pour entraÃ®ner votre modÃ¨le:

Exemple concret:
  python train_model.py --symbol BTCUSDT --timeframe 15m --data_path data/market_data/ --epochs 100 --batch_size 64 --lstm_units "128,64,32"

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --data_path    : Chemin des donnÃ©es prÃ©parÃ©es
  --epochs       : Nombre d'Ã©poques d'entraÃ®nement
  --batch_size   : Taille des batchs
  --lstm_units   : Architecture du rÃ©seau (unitÃ©s par couche LSTM)
  --dropout      : Taux de dropout pour la rÃ©gularisation (0.0-1.0)
  --learning_rate: Taux d'apprentissage (dÃ©faut: 0.001)
  --use_attention: Utiliser un mÃ©canisme d'attention (True/False)


--------------------------------------------------
3bis. PRÉPARATION DES DONNÉES DE VALIDATION
--------------------------------------------------
Utilisez le script prepare_validation_data.py pour créer un ensemble de données de validation:

Exemple concret:
  python utils/prepare_validation_data.py --symbol BTCUSDT --timeframe 15m --validation_size 0.2 --add_features

Options principales:
  --symbol         : Symbole de la paire (ex: BTCUSDT)
  --timeframe      : Intervalle de temps (15m, 1h, etc.)
  --validation_size: Proportion des données à utiliser (0.2 = 20%)
  --start_date     : Date de début pour la validation (optionnel)
  --end_date       : Date de fin pour la validation (optionnel)
  --add_features   : Ajouter les indicateurs techniques
  --output_dir     : Répertoire de sortie (défaut: data/processed/)


--------------------------------------------------
4. VALIDATION DU MODÃˆLE
--------------------------------------------------
Utilisez validate_model.py pour Ã©valuer votre modÃ¨le:

Exemple concret:
  python ai/models/model_validator.py --model_path data/models/lstm_BTCUSDT_15m.h5 --data_path data/processed/BTCUSDT_15m_val.csv --report_path reports/

Options principales:
  --model_path   : Chemin du modÃ¨le entraÃ®nÃ©
  --data_path    : Chemin des donnÃ©es de validation
  --report_path  : RÃ©pertoire de sortie des rapports
  --detailed     : GÃ©nÃ©rer un rapport dÃ©taillÃ© (True/False)
  --visualize    : CrÃ©er des visualisations (True/False)


--------------------------------------------------
5. OPTIMISATION DES PARAMÃˆTRES DE TRADING
--------------------------------------------------
Utilisez optimize_strategy.py pour trouver les meilleurs paramÃ¨tres:

Exemple concret:
  python strategies/optimize_strategy.py --symbol BTCUSDT --timeframe 15m --start_date 2023-06-01 --end_date 2023-12-31 --strategy technical_bounce --model_path data/models/lstm_BTCUSDT_15m.h5

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --start_date   : Date de dÃ©but pour l'optimisation
  --end_date     : Date de fin pour l'optimisation
  --strategy     : StratÃ©gie Ã  optimiser ("technical_bounce" ou autre)
  --model_path   : Chemin du modÃ¨le LSTM (si option use_model=True)
  --method       : MÃ©thode d'optimisation (grid, bayesian, genetic)
  --max_evals    : Nombre maximum d'Ã©valuations
  --output       : Fichier de sortie des paramÃ¨tres optimisÃ©s


--------------------------------------------------
6. BACKTESTING
--------------------------------------------------
Utilisez backtest.py pour tester votre stratÃ©gie:

Exemple concret:
  python backtesting/backtest.py --symbol BTCUSDT --timeframe 15m --start 2024-01-01 --end 2024-06-30 --strategy technical_bounce --capital 1000 --params_file data/strategy_params/technical_bounce_BTCUSDT_15m.json

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --start        : Date de dÃ©but du backtest
  --end          : Date de fin du backtest
  --capital      : Capital initial en USDT
  --strategy     : StratÃ©gie Ã  tester ("technical_bounce" par dÃ©faut)
  --use_model    : Utiliser le modÃ¨le LSTM (True/False)
  --model_path   : Chemin du modÃ¨le (optionnel)
  --params_file  : Fichier de paramÃ¨tres optimisÃ©s (optionnel)
  --output       : Fichier de sortie des rÃ©sultats
  --risk_per_trade: Pourcentage du capital risquÃ© par trade
  --stop_loss    : Pourcentage de stop-loss
  --take_profit  : Pourcentage de take-profit
  --visualize    : GÃ©nÃ©rer des visualisations (True/False)


--------------------------------------------------
7. ANALYSE DES RÃ‰SULTATS DE BACKTEST
--------------------------------------------------
Utilisez analyze_backtest.py pour Ã©valuer les performances:

Exemple concret:
  python backtesting/analyze_backtest.py --result_file data/backtest_results/backtest_BTCUSDT_15m_2024-01-01_2024-06-30.json --output_dir reports/backtest_analysis/

Options principales:
  --result_file  : Fichier JSON des rÃ©sultats du backtest
  --output_dir   : RÃ©pertoire de sortie pour les rapports
  --format       : Format des rapports (html, pdf, json)
  --compare_with : Autres fichiers de backtest pour comparaison (optionnel)


--------------------------------------------------
8. SIMULATION EN TEMPS RÃ‰EL (PAPER TRADING)
--------------------------------------------------
Testez votre stratÃ©gie en temps rÃ©el sans risquer d'argent:

Exemple concret:
  python main.py --mode paper_trading --symbols BTCUSDT --timeframe 15m --strategy technical_bounce --use_model True --model_path data/models/lstm_BTCUSDT_15m.h5 --capital 1000

Options principales:
  --mode         : Mode de fonctionnement ("paper_trading")
  --symbols      : Symboles Ã  trader, sÃ©parÃ©s par des virgules
  --timeframe    : Intervalle de temps
  --strategy     : StratÃ©gie Ã  utiliser
  --use_model    : Utiliser le modÃ¨le LSTM (True/False)
  --model_path   : Chemin du modÃ¨le (si use_model=True)
  --capital      : Capital virtuel pour la simulation
  --duration     : DurÃ©e de la simulation en heures (0 = sans limite)


--------------------------------------------------
9. TRADING EN CONDITIONS RÃ‰ELLES
--------------------------------------------------
Une fois satisfait des performances en simulation, passez en mode rÃ©el:

Exemple concret:
  python main.py --mode production --symbols BTCUSDT,ETHUSDT --timeframe 15m --strategy technical_bounce --use_model True --risk_per_trade 1 --use_testnet True

Options principales:
  --mode         : Mode de fonctionnement ("production")
  --symbols      : Symboles Ã  trader, sÃ©parÃ©s par des virgules
  --timeframe    : Intervalle de temps
  --strategy     : StratÃ©gie Ã  utiliser
  --use_model    : Utiliser le modÃ¨le LSTM
  --risk_per_trade: Pourcentage du capital risquÃ© par trade
  --stop_loss    : Pourcentage de stop-loss
  --take_profit  : Pourcentage de take-profit
  --use_testnet  : Utiliser l'API testnet Binance (True/False)
  --max_positions: Nombre maximum de positions simultanÃ©es


--------------------------------------------------
10. RÃ‰ENTRAÃ�NEMENT PÃ‰RIODIQUE DU MODÃˆLE
--------------------------------------------------
Pour maintenir la performance, rÃ©entraÃ®nez rÃ©guliÃ¨rement votre modÃ¨le:

Exemple concret:
  python ai/continuous_learning.py --symbol BTCUSDT --timeframe 15m --model_path data/models/lstm_BTCUSDT_15m.h5 --days 30 --transfer_learning True

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --model_path   : Chemin du modÃ¨le Ã  mettre Ã  jour
  --days         : Nombre de jours de donnÃ©es rÃ©centes Ã  utiliser
  --transfer_learning: Utiliser l'apprentissage par transfert
  --epochs       : Nombre d'Ã©poques pour le rÃ©entraÃ®nement
  --evaluate     : Ã‰valuer le nouveau modÃ¨le avant de remplacer l'ancien


--------------------------------------------------
CONSEILS SPÃ‰CIFIQUES
--------------------------------------------------
1. Architecture du bot:
   - Les modÃ¨les sont stockÃ©s dans data/models/
   - Les donnÃ©es de marchÃ© sont dans data/market_data/
   - Les données préparées pour validation sont dans data/processed/
   - Les paramÃ¨tres optimisÃ©s sont dans data/strategy_params/
   - Les rÃ©sultats de backtest sont dans data/backtest_results/

2. Meilleure pratique pour l'entraÃ®nement:
   - Utilisez au moins 6 mois de donnÃ©es pour l'entraÃ®nement
   - Préparez un ensemble de validation distinct (20% des données récentes)
   - La stratÃ©gie technical_bounce fonctionne mieux avec des donnÃ©es 15m ou 1h
   - Un dropout de 0.3 et le mÃ©canisme d'attention amÃ©liorent gÃ©nÃ©ralement les performances
   - Maintenez un ratio validation/training de 0.2

3. Workflow complet recommandÃ©:
   1. TÃ©lÃ©chargez les donnÃ©es (1 an minimum)
   2. Entraînez le modèle sur 80% des données
   3. Préparez un ensemble de validation avec les 20% restants
   4. Validez et évaluez le modèle avec cet ensemble
   5. Optimisez les paramÃ¨tres de trading
   6. Effectuez un backtest sur une pÃ©riode diffÃ©rente
   7. Testez en paper trading avant de passer en production

4. Surveillance du bot en production:
   - Utilisez les logs dans le rÃ©pertoire logs/
   - Configurez des alertes via Discord ou email
   - VÃ©rifiez quotidiennement les performances
   - RÃ©entraÃ®nez le modÃ¨le lorsque le win rate commence Ã  baisser
