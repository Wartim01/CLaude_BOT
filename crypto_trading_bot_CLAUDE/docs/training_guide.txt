üìä Guide pas √† pas: De l'entra√Ænement au backtesting avec votre bot de trading crypto

==============================================
GUIDE ADAPT√â AU BOT DE TRADING CRYPTO
==============================================

Ce guide d√©taille les √©tapes sp√©cifiques pour utiliser les fonctionnalit√©s de votre bot, de l'entra√Ænement au backtesting.

--------------------------------------------------
1. T√âL√âCHARGEMENT DES DONN√âES HISTORIQUES
--------------------------------------------------
Utilisez le script data_loader.py pour t√©l√©charger les donn√©es depuis Binance:

Exemple concret:
  python download_data.py --symbol BTCUSDT --interval 15m --start 2023-01-01 --end 2023-12-31 --output data/market_data/BTCUSDT_15m.csv

Options disponibles:
  --symbol       : Symbole de la paire (ex: BTCUSDT)
  --interval     : Intervalle de temps (1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, etc.)
  --start        : Date de d√©but au format YYYY-MM-DD
  --end          : Date de fin au format YYYY-MM-DD
  --output       : Chemin de sortie des donn√©es (optionnel)
  --use_testnet  : Utiliser l'API testnet (True/False)


--------------------------------------------------
3. ENTRA√éNEMENT DU MOD√àLE LSTM
--------------------------------------------------
Utilisez le script train_model.py pour entra√Æner votre mod√®le:

Exemple concret:
  python train_model.py --symbol BTCUSDT --timeframe 15m --data_path data/market_data/ --epochs 100 --batch_size 64 --lstm_units "128,64,32"

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --data_path    : Chemin des donn√©es pr√©par√©es
  --epochs       : Nombre d'√©poques d'entra√Ænement
  --batch_size   : Taille des batchs
  --lstm_units   : Architecture du r√©seau (unit√©s par couche LSTM)
  --dropout      : Taux de dropout pour la r√©gularisation (0.0-1.0)
  --learning_rate: Taux d'apprentissage (d√©faut: 0.001)
  --use_attention: Utiliser un m√©canisme d'attention (True/False)


--------------------------------------------------
4. VALIDATION DU MOD√àLE
--------------------------------------------------
Utilisez validate_model.py pour √©valuer votre mod√®le:

Exemple concret:
  python ai/models/model_validator.py --model_path data/models/lstm_BTCUSDT_15m.h5 --data_path data/processed/BTCUSDT_15m_val.csv --report_path reports/

Options principales:
  --model_path   : Chemin du mod√®le entra√Æn√©
  --data_path    : Chemin des donn√©es de validation
  --report_path  : R√©pertoire de sortie des rapports
  --detailed     : G√©n√©rer un rapport d√©taill√© (True/False)
  --visualize    : Cr√©er des visualisations (True/False)


--------------------------------------------------
5. OPTIMISATION DES PARAM√àTRES DE TRADING
--------------------------------------------------
Utilisez optimize_strategy.py pour trouver les meilleurs param√®tres:

Exemple concret:
  python strategies/optimize_strategy.py --symbol BTCUSDT --timeframe 15m --start_date 2023-06-01 --end_date 2023-12-31 --strategy technical_bounce --model_path data/models/lstm_BTCUSDT_15m.h5

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --start_date   : Date de d√©but pour l'optimisation
  --end_date     : Date de fin pour l'optimisation
  --strategy     : Strat√©gie √† optimiser ("technical_bounce" ou autre)
  --model_path   : Chemin du mod√®le LSTM (si option use_model=True)
  --method       : M√©thode d'optimisation (grid, bayesian, genetic)
  --max_evals    : Nombre maximum d'√©valuations
  --output       : Fichier de sortie des param√®tres optimis√©s


--------------------------------------------------
6. BACKTESTING
--------------------------------------------------
Utilisez backtest.py pour tester votre strat√©gie:

Exemple concret:
  python backtesting/backtest.py --symbol BTCUSDT --timeframe 15m --start 2024-01-01 --end 2024-06-30 --strategy technical_bounce --capital 1000 --params_file data/strategy_params/technical_bounce_BTCUSDT_15m.json

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --start        : Date de d√©but du backtest
  --end          : Date de fin du backtest
  --capital      : Capital initial en USDT
  --strategy     : Strat√©gie √† tester ("technical_bounce" par d√©faut)
  --use_model    : Utiliser le mod√®le LSTM (True/False)
  --model_path   : Chemin du mod√®le (optionnel)
  --params_file  : Fichier de param√®tres optimis√©s (optionnel)
  --output       : Fichier de sortie des r√©sultats
  --risk_per_trade: Pourcentage du capital risqu√© par trade
  --stop_loss    : Pourcentage de stop-loss
  --take_profit  : Pourcentage de take-profit
  --visualize    : G√©n√©rer des visualisations (True/False)


--------------------------------------------------
7. ANALYSE DES R√âSULTATS DE BACKTEST
--------------------------------------------------
Utilisez analyze_backtest.py pour √©valuer les performances:

Exemple concret:
  python backtesting/analyze_backtest.py --result_file data/backtest_results/backtest_BTCUSDT_15m_2024-01-01_2024-06-30.json --output_dir reports/backtest_analysis/

Options principales:
  --result_file  : Fichier JSON des r√©sultats du backtest
  --output_dir   : R√©pertoire de sortie pour les rapports
  --format       : Format des rapports (html, pdf, json)
  --compare_with : Autres fichiers de backtest pour comparaison (optionnel)


--------------------------------------------------
8. SIMULATION EN TEMPS R√âEL (PAPER TRADING)
--------------------------------------------------
Testez votre strat√©gie en temps r√©el sans risquer d'argent:

Exemple concret:
  python main.py --mode paper_trading --symbols BTCUSDT --timeframe 15m --strategy technical_bounce --use_model True --model_path data/models/lstm_BTCUSDT_15m.h5 --capital 1000

Options principales:
  --mode         : Mode de fonctionnement ("paper_trading")
  --symbols      : Symboles √† trader, s√©par√©s par des virgules
  --timeframe    : Intervalle de temps
  --strategy     : Strat√©gie √† utiliser
  --use_model    : Utiliser le mod√®le LSTM (True/False)
  --model_path   : Chemin du mod√®le (si use_model=True)
  --capital      : Capital virtuel pour la simulation
  --duration     : Dur√©e de la simulation en heures (0 = sans limite)


--------------------------------------------------
9. TRADING EN CONDITIONS R√âELLES
--------------------------------------------------
Une fois satisfait des performances en simulation, passez en mode r√©el:

Exemple concret:
  python main.py --mode production --symbols BTCUSDT,ETHUSDT --timeframe 15m --strategy technical_bounce --use_model True --risk_per_trade 1 --use_testnet True

Options principales:
  --mode         : Mode de fonctionnement ("production")
  --symbols      : Symboles √† trader, s√©par√©s par des virgules
  --timeframe    : Intervalle de temps
  --strategy     : Strat√©gie √† utiliser
  --use_model    : Utiliser le mod√®le LSTM
  --risk_per_trade: Pourcentage du capital risqu√© par trade
  --stop_loss    : Pourcentage de stop-loss
  --take_profit  : Pourcentage de take-profit
  --use_testnet  : Utiliser l'API testnet Binance (True/False)
  --max_positions: Nombre maximum de positions simultan√©es


--------------------------------------------------
10. R√âENTRA√éNEMENT P√âRIODIQUE DU MOD√àLE
--------------------------------------------------
Pour maintenir la performance, r√©entra√Ænez r√©guli√®rement votre mod√®le:

Exemple concret:
  python ai/continuous_learning.py --symbol BTCUSDT --timeframe 15m --model_path data/models/lstm_BTCUSDT_15m.h5 --days 30 --transfer_learning True

Options principales:
  --symbol       : Symbole de la paire
  --timeframe    : Intervalle de temps
  --model_path   : Chemin du mod√®le √† mettre √† jour
  --days         : Nombre de jours de donn√©es r√©centes √† utiliser
  --transfer_learning: Utiliser l'apprentissage par transfert
  --epochs       : Nombre d'√©poques pour le r√©entra√Ænement
  --evaluate     : √âvaluer le nouveau mod√®le avant de remplacer l'ancien


--------------------------------------------------
CONSEILS SP√âCIFIQUES
--------------------------------------------------
1. Architecture du bot:
   - Les mod√®les sont stock√©s dans data/models/
   - Les donn√©es de march√© sont dans data/market_data/
   - Les param√®tres optimis√©s sont dans data/strategy_params/
   - Les r√©sultats de backtest sont dans data/backtest_results/

2. Meilleure pratique pour l'entra√Ænement:
   - Utilisez au moins 6 mois de donn√©es pour l'entra√Ænement
   - La strat√©gie technical_bounce fonctionne mieux avec des donn√©es 15m ou 1h
   - Un dropout de 0.3 et le m√©canisme d'attention am√©liorent g√©n√©ralement les performances
   - Maintenez un ratio validation/training de 0.2

3. Workflow complet recommand√©:
   1. T√©l√©chargez les donn√©es (1 an minimum)
   2. Pr√©parez-les et entra√Ænez le mod√®le
   3. Optimisez les param√®tres avec une p√©riode r√©cente (3-6 mois)
   4. Effectuez un backtest sur une p√©riode diff√©rente
   5. Testez en paper trading avant de passer en production

4. Surveillance du bot en production:
   - Utilisez les logs dans le r√©pertoire logs/
   - Configurez des alertes via Discord ou email
   - V√©rifiez quotidiennement les performances
   - R√©entra√Ænez le mod√®le lorsque le win rate commence √† baisser
