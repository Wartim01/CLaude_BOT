"""
D√©monstration de l'analyse de sentiment des nouvelles crypto
et son int√©gration dans le syst√®me de trading
"""
import os
import sys
import time
import pandas as pd
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ai.news_sentiment_analyzer import NewsSentimentAnalyzer
from exchanges.binance_client import BinanceClient
from config.config import API_KEYS
from utils.logger import setup_logger

logger = setup_logger("sentiment_demo")

def main():
    print("D√©marrage de la d√©monstration d'analyse de sentiment")
    
    # Initialiser l'analyseur de sentiment
    sentiment_analyzer = NewsSentimentAnalyzer(refresh_interval=1800)  # Rafra√Æchir toutes les 30 minutes
    
    # Charger les donn√©es initiales et d√©marrer les mises √† jour automatiques
    print("Chargement des donn√©es d'actualit√©s et analyse du sentiment...")
    sentiment_analyzer.update_news_data()
    sentiment_analyzer.update_sentiment_analysis()
    sentiment_analyzer.start_auto_updates()
    
    # Initialiser le client Binance pour r√©cup√©rer les prix
    binance = BinanceClient(API_KEYS["BINANCE"]["key"], API_KEYS["BINANCE"]["secret"])
    
    # Liste des symboles √† surveiller
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT", "DOGEUSDT"]
    
    try:
        # 1. R√©cup√©rer le sentiment pour chaque symbole
        print("\n--- Sentiment actuel par symbole ---")
        for symbol in symbols:
            sentiment = sentiment_analyzer.get_sentiment_for_symbol(symbol)
            
            # Formater le score de sentiment
            score = sentiment.get("sentiment_score", 0)
            score_str = f"{score:.2f}"
            if score > 0:
                score_str = f"+{score_str}"
            
            print(f"{symbol}: {sentiment.get('dominant_sentiment', 'neutral').upper()} ({score_str}) | " 
                  f"Tendance: {sentiment.get('trend', 'stable')} | "
                  f"Articles: {sentiment.get('total_articles', 0)}")
        
        # 2. R√©cup√©rer les articles r√©cents pour BTC
        print("\n--- Articles r√©cents pour Bitcoin ---")
        btc_articles = sentiment_analyzer.get_top_articles("BTCUSDT", limit=5)
        
        for i, article in enumerate(btc_articles, 1):
            sentiment_score = article.get("sentiment", {}).get("compound", 0)
            sentiment_str = "üî¥" if sentiment_score < -0.1 else "üü¢" if sentiment_score > 0.1 else "‚ö™"
            print(f"{i}. {sentiment_str} {article.get('title')} ({sentiment_score:.2f})")
            print(f"   Source: {article.get('source')} | URL: {article.get('url')}")
        
        # 3. Analyser les shifts de sentiment r√©cents
        print("\n--- Changements significatifs de sentiment (3 derniers jours) ---")
        shifts = sentiment_analyzer.detect_sentiment_shifts(window_days=3, threshold=0.15)
        
        if shifts["total_shifts_detected"] > 0:
            for symbol, shift_data in list(shifts["shifts"].items())[:5]:  # Top 5
                direction = "‚ÜóÔ∏è" if shift_data["type"] == "improving" else "‚ÜòÔ∏è"
                print(f"{symbol}: {direction} {shift_data['from']['sentiment']} ‚Üí {shift_data['to']['sentiment']} "
                      f"(Œî: {shift_data['shift']:.2f})")
        else:
            print("Aucun changement significatif de sentiment d√©tect√©.")
        
        # 4. R√©cup√©rer les prix et analyser les corr√©lations
        print("\n--- Analyse des corr√©lations sentiment-prix ---")
        
        # R√©cup√©rer les donn√©es de prix historiques
        price_data = {}
        for symbol in symbols:
            klines = binance.get_historical_klines(symbol, "1d", "21 days ago UTC")
            if klines:
                df = pd.DataFrame(klines, columns=["timestamp", "open", "high", "low", "close", "volume", 
                                                "close_time", "quote_volume", "trades", "taker_buy_base", 
                                                "taker_buy_quote", "ignored"])
                
                # Convertir les types
                for col in ["open", "high", "low", "close", "volume"]:
                    df[col] = df[col].astype(float)
                
                df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
                df.set_index("timestamp", inplace=True)
                
                price_data[symbol] = df
        
        # Analyser les corr√©lations
        correlations = sentiment_analyzer.analyze_sentiment_correlation(price_data)
        
        if correlations["symbols_analyzed"] > 0:
            for symbol, result in correlations["results"].items():
                print(f"{symbol}: Valeur pr√©dictive {result['predictive_value'].upper()} | "
                      f"Meilleure corr√©lation: {result['best_correlation']:.2f}")
                
                # D√©tailler les corr√©lations par p√©riode
                corrs = result["correlations"]
                print(f"  ‚îú‚îÄ 1 jour: {corrs.get('1d', 0):.2f}")
                print(f"  ‚îú‚îÄ 3 jours: {corrs.get('3d', 0):.2f}")
                print(f"  ‚îî‚îÄ 7 jours: {corrs.get('7d', 0):.2f}")
        else:
            print("Pas assez de donn√©es pour l'analyse de corr√©lation.")
        
        # 5. R√©sum√© global du march√©
        print("\n--- R√©sum√© global du sentiment du march√© ---")
        market_summary = sentiment_analyzer.get_sentiment_summary()
        
        market_sentiment = market_summary["market_sentiment"].upper()
        sentiment_score = market_summary["market_sentiment_score"]
        
        print(f"Sentiment global: {market_sentiment} ({sentiment_score:.2f})")
        print(f"Bas√© sur {market_summary['data_sources']['total_articles']} articles pour {market_summary['data_sources']['total_symbols']} symboles")
        
        # Attendre que l'utilisateur quitte
        print("\nAppuyez sur Ctrl+C pour quitter...")
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nArr√™t de la d√©monstration...")
    finally:
        # Arr√™ter les mises √† jour automatiques
        sentiment_analyzer.stop_auto_updates()
        print("D√©monstration termin√©e.")

if __name__ == "__main__":
    main()
